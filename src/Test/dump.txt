[1 of 1] Compiling Main             ( test.hs, test.o )

==================== Tidy Core ====================
Result size of Tidy Core = {terms: 754, types: 728, coercions: 9}

Rec {
$smultPM'_r4rg
  :: GHC.Types.Int
     -> GHC.Prim.Int#
     -> [(GHC.Types.Int, GHC.Types.Int)]
     -> [(GHC.Types.Int, GHC.Types.Int)]
[GblId, Arity=3, Caf=NoCafRefs, Str=DmdType <L,U(U)><L,U><S,1*U>]
$smultPM'_r4rg =
  \ (sc_s4kM :: GHC.Types.Int)
    (sc1_s4kN :: GHC.Prim.Int#)
    (sc2_s4kO :: [(GHC.Types.Int, GHC.Types.Int)]) ->
    case sc2_s4kO of _ [Occ=Dead] {
      [] -> GHC.Types.[] @ (GHC.Types.Int, GHC.Types.Int);
      : ds_d1x2 ns_asb ->
        case ds_d1x2 of _ [Occ=Dead] { (j_as9, n_asa) ->
        case n_asa of _ [Occ=Dead] { GHC.Types.I# x_a1zz ->
        case GHC.Prim.*# x_a1zz sc1_s4kN of wild3_X1Z {
          __DEFAULT ->
            GHC.Types.:
              @ (GHC.Types.Int, GHC.Types.Int)
              (GHC.Num.$fNumInt_$c+ sc_s4kM j_as9, GHC.Types.I# wild3_X1Z)
              ($smultPM'_r4rg sc_s4kM sc1_s4kN ns_asb);
          0 -> $smultPM'_r4rg sc_s4kM sc1_s4kN ns_asb
        }
        }
        }
    }
end Rec }

lvl_r4rh :: [(GHC.Types.Int, GHC.Types.Int)]
[GblId, Str=DmdType b]
lvl_r4rh =
  Control.Exception.Base.patError
    @ [(GHC.Types.Int, GHC.Types.Int)]
    "test.hs:(19,1)-(26,16)|function addPM"#

Rec {
$saddPM_r4ri
  :: GHC.Prim.Int#
     -> GHC.Types.Int
     -> [(GHC.Types.Int, GHC.Types.Int)]
     -> [(GHC.Types.Int, GHC.Types.Int)]
     -> [(GHC.Types.Int, GHC.Types.Int)]
[GblId, Arity=4, Str=DmdType <L,U><L,U><L,U><S,1*U>]
$saddPM_r4ri =
  \ (sc_s4iL :: GHC.Prim.Int#)
    (sc1_s4iM :: GHC.Types.Int)
    (sc2_s4iN :: [(GHC.Types.Int, GHC.Types.Int)])
    (sc3_s4iO :: [(GHC.Types.Int, GHC.Types.Int)]) ->
    case sc3_s4iO of _ [Occ=Dead] {
      [] ->
        GHC.Types.:
          @ (GHC.Types.Int, GHC.Types.Int)
          (GHC.Types.I# sc_s4iL, sc1_s4iM)
          sc2_s4iN;
      : ipv_s1xG ipv1_s1xH ->
        case ipv_s1xG of wild1_Xm { (j_aFz, g_aFA) ->
        case j_aFz of _ [Occ=Dead] { GHC.Types.I# y_a1yJ ->
        let {
          c_aFC [Dmd=<L,U(U)>] :: GHC.Types.Int
          [LclId, Str=DmdType]
          c_aFC =
            case sc1_s4iM of _ [Occ=Dead] { GHC.Types.I# x_a1yv ->
            case g_aFA of _ [Occ=Dead] { GHC.Types.I# y1_a1yz ->
            GHC.Types.I# (GHC.Prim.+# x_a1yv y1_a1yz)
            }
            } } in
        let {
          $j_s1F1 :: GHC.Prim.Void# -> [(GHC.Types.Int, GHC.Types.Int)]
          [LclId, Arity=1, Str=DmdType <L,A>]
          $j_s1F1 =
            \ _ [Occ=Dead] ->
              let {
                $j1_s1EW :: GHC.Prim.Void# -> [(GHC.Types.Int, GHC.Types.Int)]
                [LclId, Arity=1, Str=DmdType <L,A>]
                $j1_s1EW =
                  \ _ [Occ=Dead] ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool (GHC.Prim.<# sc_s4iL y_a1yJ)
                    of _ [Occ=Dead] {
                      GHC.Types.False ->
                        case GHC.Prim.tagToEnum#
                               @ GHC.Types.Bool (GHC.Prim.># sc_s4iL y_a1yJ)
                        of _ [Occ=Dead] {
                          GHC.Types.False -> lvl_r4rh;
                          GHC.Types.True ->
                            GHC.Types.:
                              @ (GHC.Types.Int, GHC.Types.Int)
                              (GHC.Types.I# sc_s4iL, sc1_s4iM)
                              ($saddPM1_r4rj sc2_s4iN y_a1yJ g_aFA ipv1_s1xH)
                        };
                      GHC.Types.True ->
                        GHC.Types.:
                          @ (GHC.Types.Int, GHC.Types.Int)
                          wild1_Xm
                          ($saddPM_r4ri sc_s4iL sc1_s4iM sc2_s4iN ipv1_s1xH)
                    } } in
              case GHC.Prim.tagToEnum#
                     @ GHC.Types.Bool (GHC.Prim.==# sc_s4iL y_a1yJ)
              of _ [Occ=Dead] {
                GHC.Types.False -> $j1_s1EW GHC.Prim.void#;
                GHC.Types.True ->
                  case c_aFC of _ [Occ=Dead] { GHC.Types.I# x_X1AS ->
                  case x_X1AS of _ [Occ=Dead] {
                    __DEFAULT -> $j1_s1EW GHC.Prim.void#;
                    0 -> addPM_r4rk sc2_s4iN ipv1_s1xH
                  }
                  }
              } } in
        case GHC.Prim.tagToEnum#
               @ GHC.Types.Bool (GHC.Prim.==# sc_s4iL y_a1yJ)
        of _ [Occ=Dead] {
          GHC.Types.False -> $j_s1F1 GHC.Prim.void#;
          GHC.Types.True ->
            case c_aFC of _ [Occ=Dead] { GHC.Types.I# x_a1yR ->
            case x_a1yR of _ [Occ=Dead] {
              __DEFAULT ->
                GHC.Types.:
                  @ (GHC.Types.Int, GHC.Types.Int)
                  (GHC.Types.I# sc_s4iL, GHC.Num.$fNumInt_$c+ sc1_s4iM g_aFA)
                  (addPM_r4rk sc2_s4iN ipv1_s1xH);
              0 -> $j_s1F1 GHC.Prim.void#
            }
            }
        }
        }
        }
    }

$saddPM1_r4rj
  :: [(GHC.Types.Int, GHC.Types.Int)]
     -> GHC.Prim.Int#
     -> GHC.Types.Int
     -> [(GHC.Types.Int, GHC.Types.Int)]
     -> [(GHC.Types.Int, GHC.Types.Int)]
[GblId, Arity=4, Str=DmdType <S,1*U><L,U><L,U><L,U>]
$saddPM1_r4rj =
  \ (sc_s4iH :: [(GHC.Types.Int, GHC.Types.Int)])
    (sc1_s4iI :: GHC.Prim.Int#)
    (sc2_s4iJ :: GHC.Types.Int)
    (sc3_s4iK :: [(GHC.Types.Int, GHC.Types.Int)]) ->
    case sc_s4iH of _ [Occ=Dead] {
      [] ->
        GHC.Types.:
          @ (GHC.Types.Int, GHC.Types.Int)
          (GHC.Types.I# sc1_s4iI, sc2_s4iJ)
          sc3_s4iK;
      : ipv_s1xC ipv1_s1xD ->
        case ipv_s1xC of wild1_Xg { (i_aFv, f_aFw) ->
        case i_aFv of wild2_a1yD { GHC.Types.I# x_a1yF ->
        let {
          c_aFC [Dmd=<L,U(U)>] :: GHC.Types.Int
          [LclId, Str=DmdType]
          c_aFC =
            case f_aFw of _ [Occ=Dead] { GHC.Types.I# x1_a1yv ->
            case sc2_s4iJ of _ [Occ=Dead] { GHC.Types.I# y_a1yz ->
            GHC.Types.I# (GHC.Prim.+# x1_a1yv y_a1yz)
            }
            } } in
        let {
          $j_s1F1 :: GHC.Prim.Void# -> [(GHC.Types.Int, GHC.Types.Int)]
          [LclId, Arity=1, Str=DmdType <L,A>]
          $j_s1F1 =
            \ _ [Occ=Dead] ->
              let {
                $j1_s1EW :: GHC.Prim.Void# -> [(GHC.Types.Int, GHC.Types.Int)]
                [LclId, Arity=1, Str=DmdType <L,A>]
                $j1_s1EW =
                  \ _ [Occ=Dead] ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool (GHC.Prim.<# x_a1yF sc1_s4iI)
                    of _ [Occ=Dead] {
                      GHC.Types.False ->
                        case GHC.Prim.tagToEnum#
                               @ GHC.Types.Bool (GHC.Prim.># x_a1yF sc1_s4iI)
                        of _ [Occ=Dead] {
                          GHC.Types.False -> lvl_r4rh;
                          GHC.Types.True ->
                            GHC.Types.:
                              @ (GHC.Types.Int, GHC.Types.Int)
                              wild1_Xg
                              ($saddPM1_r4rj ipv1_s1xD sc1_s4iI sc2_s4iJ sc3_s4iK)
                        };
                      GHC.Types.True ->
                        GHC.Types.:
                          @ (GHC.Types.Int, GHC.Types.Int)
                          (GHC.Types.I# sc1_s4iI, sc2_s4iJ)
                          ($saddPM_r4ri x_a1yF f_aFw ipv1_s1xD sc3_s4iK)
                    } } in
              case GHC.Prim.tagToEnum#
                     @ GHC.Types.Bool (GHC.Prim.==# x_a1yF sc1_s4iI)
              of _ [Occ=Dead] {
                GHC.Types.False -> $j1_s1EW GHC.Prim.void#;
                GHC.Types.True ->
                  case c_aFC of _ [Occ=Dead] { GHC.Types.I# x1_X1AS ->
                  case x1_X1AS of _ [Occ=Dead] {
                    __DEFAULT -> $j1_s1EW GHC.Prim.void#;
                    0 -> addPM_r4rk ipv1_s1xD sc3_s4iK
                  }
                  }
              } } in
        case GHC.Prim.tagToEnum#
               @ GHC.Types.Bool (GHC.Prim.==# x_a1yF sc1_s4iI)
        of _ [Occ=Dead] {
          GHC.Types.False -> $j_s1F1 GHC.Prim.void#;
          GHC.Types.True ->
            case c_aFC of _ [Occ=Dead] { GHC.Types.I# x1_a1yR ->
            case x1_a1yR of _ [Occ=Dead] {
              __DEFAULT ->
                GHC.Types.:
                  @ (GHC.Types.Int, GHC.Types.Int)
                  (wild2_a1yD, GHC.Num.$fNumInt_$c+ f_aFw sc2_s4iJ)
                  (addPM_r4rk ipv1_s1xD sc3_s4iK);
              0 -> $j_s1F1 GHC.Prim.void#
            }
            }
        }
        }
        }
    }

addPM_r4rk
  :: [(GHC.Types.Int, GHC.Types.Int)]
     -> [(GHC.Types.Int, GHC.Types.Int)]
     -> [(GHC.Types.Int, GHC.Types.Int)]
[GblId, Arity=2, Str=DmdType <S,1*U><S,1*U>]
addPM_r4rk =
  \ (ds_d1wM :: [(GHC.Types.Int, GHC.Types.Int)])
    (gs_aFs :: [(GHC.Types.Int, GHC.Types.Int)]) ->
    case ds_d1wM of wild_Xj {
      [] -> gs_aFs;
      : ipv_s1xC ipv1_s1xD ->
        case gs_aFs of _ [Occ=Dead] {
          [] -> wild_Xj;
          : ipv2_s1xG ipv3_s1xH ->
            case ipv_s1xC of wild2_Xg { (i_aFv, f_aFw) ->
            case ipv2_s1xG of wild3_Xm { (j_aFz, g_aFA) ->
            case i_aFv of wild4_a1yD { GHC.Types.I# x_a1yF ->
            case j_aFz of _ [Occ=Dead] { GHC.Types.I# y_a1yJ ->
            let {
              c_aFC [Dmd=<L,U(U)>] :: GHC.Types.Int
              [LclId, Str=DmdType]
              c_aFC =
                case f_aFw of _ [Occ=Dead] { GHC.Types.I# x1_a1yv ->
                case g_aFA of _ [Occ=Dead] { GHC.Types.I# y1_a1yz ->
                GHC.Types.I# (GHC.Prim.+# x1_a1yv y1_a1yz)
                }
                } } in
            let {
              $j_s1F1 :: GHC.Prim.Void# -> [(GHC.Types.Int, GHC.Types.Int)]
              [LclId, Arity=1, Str=DmdType <L,A>]
              $j_s1F1 =
                \ _ [Occ=Dead] ->
                  let {
                    $j1_s1EW :: GHC.Prim.Void# -> [(GHC.Types.Int, GHC.Types.Int)]
                    [LclId, Arity=1, Str=DmdType <L,A>]
                    $j1_s1EW =
                      \ _ [Occ=Dead] ->
                        case GHC.Prim.tagToEnum#
                               @ GHC.Types.Bool (GHC.Prim.<# x_a1yF y_a1yJ)
                        of _ [Occ=Dead] {
                          GHC.Types.False ->
                            case GHC.Prim.tagToEnum#
                                   @ GHC.Types.Bool (GHC.Prim.># x_a1yF y_a1yJ)
                            of _ [Occ=Dead] {
                              GHC.Types.False -> lvl_r4rh;
                              GHC.Types.True ->
                                GHC.Types.:
                                  @ (GHC.Types.Int, GHC.Types.Int)
                                  wild2_Xg
                                  ($saddPM1_r4rj ipv1_s1xD y_a1yJ g_aFA ipv3_s1xH)
                            };
                          GHC.Types.True ->
                            GHC.Types.:
                              @ (GHC.Types.Int, GHC.Types.Int)
                              wild3_Xm
                              ($saddPM_r4ri x_a1yF f_aFw ipv1_s1xD ipv3_s1xH)
                        } } in
                  case GHC.Prim.tagToEnum#
                         @ GHC.Types.Bool (GHC.Prim.==# x_a1yF y_a1yJ)
                  of _ [Occ=Dead] {
                    GHC.Types.False -> $j1_s1EW GHC.Prim.void#;
                    GHC.Types.True ->
                      case c_aFC of _ [Occ=Dead] { GHC.Types.I# x1_X1AS ->
                      case x1_X1AS of _ [Occ=Dead] {
                        __DEFAULT -> $j1_s1EW GHC.Prim.void#;
                        0 -> addPM_r4rk ipv1_s1xD ipv3_s1xH
                      }
                      }
                  } } in
            case GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool (GHC.Prim.==# x_a1yF y_a1yJ)
            of _ [Occ=Dead] {
              GHC.Types.False -> $j_s1F1 GHC.Prim.void#;
              GHC.Types.True ->
                case c_aFC of _ [Occ=Dead] { GHC.Types.I# x1_a1yR ->
                case x1_a1yR of _ [Occ=Dead] {
                  __DEFAULT ->
                    GHC.Types.:
                      @ (GHC.Types.Int, GHC.Types.Int)
                      (wild4_a1yD, GHC.Num.$fNumInt_$c+ f_aFw g_aFA)
                      (addPM_r4rk ipv1_s1xD ipv3_s1xH);
                  0 -> $j_s1F1 GHC.Prim.void#
                }
                }
            }
            }
            }
            }
            }
        }
    }
end Rec }

Rec {
$smultPM_r4rl
  :: [(GHC.Types.Int, GHC.Types.Int)]
     -> (GHC.Types.Int, GHC.Types.Int)
     -> [(GHC.Types.Int, GHC.Types.Int)]
     -> [(GHC.Types.Int, GHC.Types.Int)]
[GblId, Arity=3, Str=DmdType <L,1*U><L,U><L,U>]
$smultPM_r4rl =
  \ (sc_s4io :: [(GHC.Types.Int, GHC.Types.Int)])
    (sc1_s4ip :: (GHC.Types.Int, GHC.Types.Int))
    (sc2_s4iq :: [(GHC.Types.Int, GHC.Types.Int)]) ->
    case sc_s4io of _ [Occ=Dead] {
      [] -> GHC.Types.[] @ (GHC.Types.Int, GHC.Types.Int);
      : ds_d1x6 ms_as3 ->
        case ds_d1x6 of _ [Occ=Dead] { (i_as1, m_as2) ->
        case sc1_s4ip of wild2_Xd { (j_as9, n_asa) ->
        case n_asa of _ [Occ=Dead] { GHC.Types.I# x_a1zz ->
        case m_as2 of _ [Occ=Dead] { GHC.Types.I# y_a1zD ->
        case GHC.Prim.*# x_a1zz y_a1zD of wild5_X1Z {
          __DEFAULT ->
            addPM_r4rk
              (GHC.Types.:
                 @ (GHC.Types.Int, GHC.Types.Int)
                 (case i_as1 of _ [Occ=Dead] { GHC.Types.I# x1_a1yv ->
                  case j_as9 of _ [Occ=Dead] { GHC.Types.I# y1_a1yz ->
                  GHC.Types.I# (GHC.Prim.+# x1_a1yv y1_a1yz)
                  }
                  },
                  GHC.Types.I# wild5_X1Z)
                 ($smultPM'_r4rg i_as1 y_a1zD sc2_s4iq))
              ($smultPM_r4rl ms_as3 wild2_Xd sc2_s4iq);
          0 ->
            addPM_r4rk
              ($smultPM'_r4rg i_as1 y_a1zD sc2_s4iq)
              ($smultPM_r4rl ms_as3 wild2_Xd sc2_s4iq)
        }
        }
        }
        }
        }
    }
end Rec }

Rec {
Main.$wheavyBench [Occ=LoopBreaker]
  :: [(GHC.Types.Int, GHC.Types.Int)]
     -> GHC.Prim.Int# -> [(GHC.Types.Int, GHC.Types.Int)]
[GblId, Arity=2, Str=DmdType <S,U><S,1*U>]
Main.$wheavyBench =
  \ (w_s4ec :: [(GHC.Types.Int, GHC.Types.Int)])
    (ww_s4eg :: GHC.Prim.Int#) ->
    case ww_s4eg of ds_X1xj {
      __DEFAULT ->
        case Main.$wheavyBench w_s4ec (GHC.Prim.-# ds_X1xj 1) of vx_a1zO {
          [] -> GHC.Types.[] @ (GHC.Types.Int, GHC.Types.Int);
          : ipv_s1yi ipv1_s1yj ->
            case w_s4ec of _ [Occ=Dead] {
              [] -> GHC.Types.[] @ (GHC.Types.Int, GHC.Types.Int);
              : ds1_d1x6 ms_as3 ->
                case ds1_d1x6 of _ [Occ=Dead] { (i_as1, m_as2) ->
                letrec {
                  addPM1_a16u [Occ=LoopBreaker]
                    :: [(GHC.Types.Int, GHC.Types.Int)]
                       -> [(GHC.Types.Int, GHC.Types.Int)]
                       -> [(GHC.Types.Int, GHC.Types.Int)]
                  [LclId, Arity=2, Str=DmdType]
                  addPM1_a16u =
                    \ (ds2_d1wM :: [(GHC.Types.Int, GHC.Types.Int)])
                      (gs_aFs :: [(GHC.Types.Int, GHC.Types.Int)]) ->
                      case ds2_d1wM of wild2_Xj {
                        [] -> gs_aFs;
                        : ipv2_s1xC ipv3_s1xD ->
                          case gs_aFs of wild3_Xf {
                            [] -> wild2_Xj;
                            : ipv4_s1xG ipv5_s1xH ->
                              case ipv2_s1xC of _ [Occ=Dead] { (i1_aFv, f_aFw) ->
                              case ipv4_s1xG of _ [Occ=Dead] { (j_aFz, g_aFA) ->
                              let {
                                c_aFC :: GHC.Types.Int
                                [LclId, Str=DmdType]
                                c_aFC =
                                  case f_aFw of _ [Occ=Dead] { GHC.Types.I# x_a1yv ->
                                  case g_aFA of _ [Occ=Dead] { GHC.Types.I# y_a1yz ->
                                  GHC.Types.I# (GHC.Prim.+# x_a1yv y_a1yz)
                                  }
                                  } } in
                              case i1_aFv of wild6_a1yD { GHC.Types.I# x_a1yF ->
                              case j_aFz of wild7_a1yH { GHC.Types.I# y_a1yJ ->
                              let {
                                $j_s4nY :: GHC.Prim.Void# -> [(GHC.Types.Int, GHC.Types.Int)]
                                [LclId, Arity=1, Str=DmdType]
                                $j_s4nY =
                                  \ _ [Occ=Dead] ->
                                    let {
                                      $j1_s4nT :: GHC.Prim.Void# -> [(GHC.Types.Int, GHC.Types.Int)]
                                      [LclId, Arity=1, Str=DmdType]
                                      $j1_s4nT =
                                        \ _ [Occ=Dead] ->
                                          case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool (GHC.Prim.<# x_a1yF y_a1yJ)
                                          of _ [Occ=Dead] {
                                            GHC.Types.False ->
                                              case GHC.Prim.tagToEnum#
                                                     @ GHC.Types.Bool (GHC.Prim.># x_a1yF y_a1yJ)
                                              of _ [Occ=Dead] {
                                                GHC.Types.False ->
                                                  Control.Exception.Base.patError
                                                    @ [(GHC.Types.Int, GHC.Types.Int)]
                                                    "test.hs:(19,1)-(26,16)|function addPM"#;
                                                GHC.Types.True ->
                                                  GHC.Types.:
                                                    @ (GHC.Types.Int, GHC.Types.Int)
                                                    (wild6_a1yD, f_aFw)
                                                    (addPM1_a16u ipv3_s1xD wild3_Xf)
                                              };
                                            GHC.Types.True ->
                                              GHC.Types.:
                                                @ (GHC.Types.Int, GHC.Types.Int)
                                                (wild7_a1yH, g_aFA)
                                                (addPM1_a16u wild2_Xj ipv5_s1xH)
                                          } } in
                                    case GHC.Prim.tagToEnum#
                                           @ GHC.Types.Bool (GHC.Prim.==# x_a1yF y_a1yJ)
                                    of _ [Occ=Dead] {
                                      GHC.Types.False -> $j1_s4nT GHC.Prim.void#;
                                      GHC.Types.True ->
                                        case c_aFC of _ [Occ=Dead] { GHC.Types.I# x1_X1Ar ->
                                        case x1_X1Ar of _ [Occ=Dead] {
                                          __DEFAULT -> $j1_s4nT GHC.Prim.void#;
                                          0 -> addPM1_a16u ipv3_s1xD ipv5_s1xH
                                        }
                                        }
                                    } } in
                              case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool (GHC.Prim.==# x_a1yF y_a1yJ)
                              of _ [Occ=Dead] {
                                GHC.Types.False -> $j_s4nY GHC.Prim.void#;
                                GHC.Types.True ->
                                  case c_aFC of _ [Occ=Dead] { GHC.Types.I# x1_a1yR ->
                                  case x1_a1yR of _ [Occ=Dead] {
                                    __DEFAULT ->
                                      GHC.Types.:
                                        @ (GHC.Types.Int, GHC.Types.Int)
                                        (wild6_a1yD, GHC.Num.$fNumInt_$c+ f_aFw g_aFA)
                                        (addPM1_a16u ipv3_s1xD ipv5_s1xH);
                                    0 -> $j_s4nY GHC.Prim.void#
                                  }
                                  }
                              }
                              }
                              }
                              }
                              }
                          }
                      }; } in
                addPM1_a16u
                  (letrec {
                     multPM'_a1lu [Occ=LoopBreaker]
                       :: GHC.Types.Int
                          -> GHC.Types.Int
                          -> [(GHC.Types.Int, GHC.Types.Int)]
                          -> [(GHC.Types.Int, GHC.Types.Int)]
                     [LclId, Arity=3, Str=DmdType]
                     multPM'_a1lu =
                       \ (i1_as5 :: GHC.Types.Int)
                         (m1_as6 :: GHC.Types.Int)
                         (ds2_d1x1 :: [(GHC.Types.Int, GHC.Types.Int)]) ->
                         case ds2_d1x1 of _ [Occ=Dead] {
                           [] -> GHC.Types.[] @ (GHC.Types.Int, GHC.Types.Int);
                           : ds3_d1x2 ns_asb ->
                             case ds3_d1x2 of _ [Occ=Dead] { (j_as9, n_asa) ->
                             case n_asa of _ [Occ=Dead] { GHC.Types.I# x_a1zz ->
                             case m1_as6 of wild5_a1zB { GHC.Types.I# y_a1zD ->
                             case GHC.Prim.*# x_a1zz y_a1zD of wild6_XV {
                               __DEFAULT ->
                                 GHC.Types.:
                                   @ (GHC.Types.Int, GHC.Types.Int)
                                   (GHC.Num.$fNumInt_$c+ i1_as5 j_as9, GHC.Types.I# wild6_XV)
                                   (multPM'_a1lu i1_as5 wild5_a1zB ns_asb);
                               0 -> multPM'_a1lu i1_as5 wild5_a1zB ns_asb
                             }
                             }
                             }
                             }
                         }; } in
                   multPM'_a1lu i_as1 m_as2 vx_a1zO)
                  ($smultPM_r4rl ms_as3 ipv_s1yi ipv1_s1yj)
                }
            }
        };
      0 -> w_s4ec
    }
end Rec }

Main.main25 :: GHC.Types.Int
[GblId,
 Caf=NoCafRefs,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 10 20}]
Main.main25 = GHC.Types.I# 11

Main.main12 :: GHC.Types.Int
[GblId,
 Caf=NoCafRefs,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 10 20}]
Main.main12 = GHC.Types.I# 1

Main.main24 :: (GHC.Types.Int, GHC.Types.Int)
[GblId,
 Caf=NoCafRefs,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 10 30}]
Main.main24 = (Main.main25, Main.main12)

Main.main23 :: GHC.Types.Int
[GblId,
 Caf=NoCafRefs,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 10 20}]
Main.main23 = GHC.Types.I# 8

Main.main15 :: GHC.Types.Int
[GblId,
 Caf=NoCafRefs,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 10 20}]
Main.main15 = GHC.Types.I# 2

Main.main22 :: (GHC.Types.Int, GHC.Types.Int)
[GblId,
 Caf=NoCafRefs,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 10 30}]
Main.main22 = (Main.main23, Main.main15)

Main.main21 :: GHC.Types.Int
[GblId,
 Caf=NoCafRefs,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 10 20}]
Main.main21 = GHC.Types.I# 6

Main.main20 :: (GHC.Types.Int, GHC.Types.Int)
[GblId,
 Caf=NoCafRefs,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 10 30}]
Main.main20 = (Main.main21, Main.main12)

Main.main19 :: GHC.Types.Int
[GblId,
 Caf=NoCafRefs,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 10 20}]
Main.main19 = GHC.Types.I# 5

Main.main18 :: (GHC.Types.Int, GHC.Types.Int)
[GblId,
 Caf=NoCafRefs,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 10 30}]
Main.main18 = (Main.main19, Main.main12)

Main.main17 :: GHC.Types.Int
[GblId,
 Caf=NoCafRefs,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 10 20}]
Main.main17 = GHC.Types.I# 3

Main.main16 :: (GHC.Types.Int, GHC.Types.Int)
[GblId,
 Caf=NoCafRefs,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 10 30}]
Main.main16 = (Main.main17, Main.main15)

Main.main14 :: (GHC.Types.Int, GHC.Types.Int)
[GblId,
 Caf=NoCafRefs,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 10 30}]
Main.main14 = (Main.main15, Main.main15)

Main.main13 :: GHC.Types.Int
[GblId,
 Caf=NoCafRefs,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 10 20}]
Main.main13 = GHC.Types.I# 0

Main.main11 :: (GHC.Types.Int, GHC.Types.Int)
[GblId,
 Caf=NoCafRefs,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 10 30}]
Main.main11 = (Main.main13, Main.main12)

Main.main10 :: [(GHC.Types.Int, GHC.Types.Int)]
[GblId,
 Caf=NoCafRefs,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 10 30}]
Main.main10 =
  GHC.Types.:
    @ (GHC.Types.Int, GHC.Types.Int)
    Main.main11
    (GHC.Types.[] @ (GHC.Types.Int, GHC.Types.Int))

Main.main9 :: [(GHC.Types.Int, GHC.Types.Int)]
[GblId,
 Caf=NoCafRefs,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 10 30}]
Main.main9 =
  GHC.Types.:
    @ (GHC.Types.Int, GHC.Types.Int) Main.main14 Main.main10

Main.main8 :: [(GHC.Types.Int, GHC.Types.Int)]
[GblId,
 Caf=NoCafRefs,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 10 30}]
Main.main8 =
  GHC.Types.: @ (GHC.Types.Int, GHC.Types.Int) Main.main16 Main.main9

Main.main7 :: [(GHC.Types.Int, GHC.Types.Int)]
[GblId,
 Caf=NoCafRefs,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 10 30}]
Main.main7 =
  GHC.Types.: @ (GHC.Types.Int, GHC.Types.Int) Main.main18 Main.main8

Main.main6 :: [(GHC.Types.Int, GHC.Types.Int)]
[GblId,
 Caf=NoCafRefs,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 10 30}]
Main.main6 =
  GHC.Types.: @ (GHC.Types.Int, GHC.Types.Int) Main.main20 Main.main7

Main.main5 :: [(GHC.Types.Int, GHC.Types.Int)]
[GblId,
 Caf=NoCafRefs,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 10 30}]
Main.main5 =
  GHC.Types.: @ (GHC.Types.Int, GHC.Types.Int) Main.main22 Main.main6

Main.main4 :: [(GHC.Types.Int, GHC.Types.Int)]
[GblId,
 Caf=NoCafRefs,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 10 30}]
Main.main4 =
  GHC.Types.: @ (GHC.Types.Int, GHC.Types.Int) Main.main24 Main.main5

Main.main3 :: [(GHC.Types.Int, GHC.Types.Int)]
[GblId,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=False,
         ConLike=False, WorkFree=False, Expandable=False,
         Guidance=IF_ARGS [] 30 0}]
Main.main3 = Main.$wheavyBench Main.main4 1000

Main.main2 :: GHC.Base.String
[GblId,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=False,
         ConLike=False, WorkFree=False, Expandable=False,
         Guidance=IF_ARGS [] 100 30}]
Main.main2 =
  case GHC.List.$wlenAcc
         @ (GHC.Types.Int, GHC.Types.Int) Main.main3 0
  of ww_a4be { __DEFAULT ->
  case GHC.Show.$wshowSignedInt
         0 ww_a4be (GHC.Types.[] @ GHC.Types.Char)
  of _ [Occ=Dead] { (# ww5_a22n, ww6_a22o #) ->
  GHC.Types.: @ GHC.Types.Char ww5_a22n ww6_a22o
  }
  }

Main.main1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=1,
 Str=DmdType <L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=1, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [0] 40 0}]
Main.main1 =
  \ (eta_a1FI :: GHC.Prim.State# GHC.Prim.RealWorld) ->
    GHC.IO.Handle.Text.hPutStr2
      GHC.IO.Handle.FD.stdout Main.main2 GHC.Types.True eta_a1FI

Main.main :: GHC.Types.IO ()
[GblId,
 Arity=1,
 Str=DmdType <L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(unsat_ok=True,boring_ok=True)}]
Main.main =
  Main.main1
  `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)
          :: (GHC.Prim.State# GHC.Prim.RealWorld
              -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
               ~#
             GHC.Types.IO ())

Main.main26
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=1,
 Str=DmdType <L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=1, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(unsat_ok=True,boring_ok=True)}]
Main.main26 =
  \ (eta_B1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
    GHC.TopHandler.runMainIO1
      @ ()
      (Main.main1
       `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)
               :: (GHC.Prim.State# GHC.Prim.RealWorld
                   -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
                    ~#
                  GHC.Types.IO ()))
      eta_B1

:Main.main :: GHC.Types.IO ()
[GblId,
 Arity=1,
 Str=DmdType <L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(unsat_ok=True,boring_ok=True)}]
:Main.main =
  Main.main26
  `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)
          :: (GHC.Prim.State# GHC.Prim.RealWorld
              -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
               ~#
             GHC.Types.IO ())



Linking test ...
