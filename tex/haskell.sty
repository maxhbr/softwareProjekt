%%%%  haskell  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% {{{
\definecolor{gray_ulisses}{gray}{0.55}
\definecolor{castanho_ulisses}{rgb}{0.71,0.33,0.14}
\definecolor{preto_ulisses}{rgb}{0.41,0.20,0.04}
\definecolor{green_ulises}{rgb}{0.2,0.75,0}
\definecolor{pragmacol}{rgb}{241,168,194}

\lstdefinelanguage{HaskellUlisses}
{
  basicstyle=\upshape\ttfamily\small,
  %backgroundcolor=\color{yellow},
  %frameshape={RYRYNYYYY}{yny}{yny}{RYRYNYYYY}, %contornos... muito nice...
  sensitive=true,
  morecomment=[l][\color{gray_ulisses}\scriptsize]{--},
  morecomment=[s][\color{gray_ulisses}\scriptsize]{\{-}{-\}},
  morecomment=[s][\color{preto_ulisses}\scriptsize]{\{-\#}{\#-\}},
  morecomment=[l][\color{green_ulises}\scriptsize]{\#},
  morestring=[b]",
  stringstyle=\color{red},
  showstringspaces=false,
  numbers=left,
  firstnumber=\thelstnumber,
  numberstyle=\tiny,
  numberblanklines=true,
  showspaces=false,
  showtabs=false,
  xleftmargin=15pt,
  xrightmargin=-20pt,
  %columns=flexible,
  basewidth={0.5em,0.3em},
  columns=[l]fixed,
  %fontadjust=true,
  emph=
  {[1]
    FilePath,IOError,abs,acos,acosh,all,and,any,appendFile,approxRational,asTypeOf,asin,
    asinh,atan,atan2,atanh,basicIORun,break,catch,ceiling,chr,compare,concat,concatMap,
    const,cos,cosh,curry,cycle,decodeFloat,denominator,digitToInt,div,divMod,drop,
    dropWhile,either,elem,encodeFloat,enumFrom,enumFromThen,enumFromThenTo,enumFromTo,
    error,even,exp,exponent,fail,filter,flip,floatDigits,floatRadix,floatRange,floor,
    fmap,foldl,foldl1,foldr,foldr1,fromDouble,fromEnum,fromInt,fromInteger,fromIntegral,
    fromRational,fst,gcd,getChar,getContents,getLine,head,id,inRange,index,init,intToDigit,
    interact,ioError,isAlpha,isAlphaNum,isAscii,isControl,isDenormalized,isDigit,isHexDigit,
    isIEEE,isInfinite,isLower,isNaN,isNegativeZero,isOctDigit,isPrint,isSpace,isUpper,iterate,
    last,lcm,length,lex,lexDigits,lexLitChar,lines,log,logBase,lookup,map,mapM,mapM_,max,
    maxBound,maximum,maybe,min,minBound,minimum,mod,negate,not,notElem,null,numerator,odd,
    or,ord,otherwise,pi,pred,primExitWith,print,product,properFraction,putChar,putStr,putStrLn,quot,
    quotRem,range,rangeSize,read,readDec,readFile,readFloat,readHex,readIO,readInt,readList,readLitChar,
    readLn,readOct,readParen,readSigned,reads,readsPrec,realToFrac,recip,rem,repeat,replicate,return,
    reverse,round,scaleFloat,scanl,scanl1,scanr,scanr1,seq,sequence,sequence_,show,showChar,showInt,
    showList,showLitChar,showParen,showSigned,showString,shows,showsPrec,significand,signum,sin,
    sinh,snd,span,splitAt,sqrt,subtract,succ,sum,tail,take,takeWhile,tan,tanh,threadToIOResult,toEnum,
    toInt,toInteger,toLower,toRational,toUpper,truncate,uncurry,undefined,unlines,until,unwords,unzip,
    unzip3,userError,words,writeFile,zip,zip3,zipWith,zipWith3
  },
  %emphstyle={[1]\color{blue}},
  emphstyle={[1]\color{castanho_ulisses}},
  emph=
  {[2]
    Bool,Char,Double,Either,Float,IO,Integer,Int,Maybe,Ordering,Rational,Ratio,ReadS,ShowS,String,Complex
  },
  emphstyle={[2]\color{castanho_ulisses}},
  emph=
  {[3]
    case,class,data,deriving,do,else,if,import,in,infixl,infixr,instance,let,
    module,of,primitive,then,type,where,newtype
  },
  emphstyle={[3]\color{preto_ulisses}\textbf},
  emph=
  {[4]
    quot,rem,div,mod,elem,notElem,seq
  },
  emphstyle={[4]\color{castanho_ulisses}\textbf},
  emph=
  {[5]
    EQ,False,GT,Just,LT,Left,Nothing,Right,True,Show,Eq,Ord,Num, Fractional
  },
  emphstyle={[5]\color{preto_ulisses}\textbf},
  literate=*
    {á}{{\'a}}1 {é}{{\'e}}1 {í}{{\'i}}1 {ó}{{\'o}}1 {ú}{{\'u}}1
    {Á}{{\'A}}1 {É}{{\'E}}1 {Í}{{\'I}}1 {Ó}{{\'O}}1 {Ú}{{\'U}}1
    {à}{{\`a}}1 {è}{{\'e}}1 {ì}{{\`i}}1 {ò}{{\`o}}1 {ò}{{\`u}}1
    {À}{{\`A}}1 {È}{{\'E}}1 {Ì}{{\`I}}1 {Ò}{{\`O}}1 {Ò}{{\`U}}1
    {ä}{{\"a}}1 {ë}{{\"e}}1 {ï}{{\"i}}1 {ö}{{\"o}}1 {ü}{{\"u}}1
    {Ä}{{\"A}}1 {Ë}{{\"E}}1 {Ï}{{\"I}}1 {Ö}{{\"O}}1 {Ü}{{\"U}}1
    {â}{{\^a}}1 {ê}{{\^e}}1 {î}{{\^i}}1 {ô}{{\^o}}1 {û}{{\^u}}1
    {Â}{{\^A}}1 {Ê}{{\^E}}1 {Î}{{\^I}}1 {Ô}{{\^O}}1 {Û}{{\^U}}1
    {œ}{{\oe}}1 {Œ}{{\OE}}1 {æ}{{\ae}}1 {Æ}{{\AE}}1 {ß}{{\ss}}1
    {ç}{{\c c}}1 {Ç}{{\c C}}1 {ø}{{\o}}1 {å}{{\r a}}1 {Å}{{\r A}}1
    {€}{{\EUR}}1 {£}{{\pounds}}1
    %% Haskell Concealing
    {::}{{:\!\!:\ }}1 {\\}{{$\lambda$}}1 {->}{{\trightarrow}}1 
    {<-}{{\tleftarrow}}1 {=>}{{\tRightarrow}}1 {==}{{\tequiv}}1
    {/=}{{\tneq}}1 {++}{{\tdplus}}1 
}

\DeclareUnicodeCharacter{2070}{{\textsuperscript{0}}}
\DeclareUnicodeCharacter{2071}{{\textsuperscript{1}}}
\DeclareUnicodeCharacter{2072}{{\textsuperscript{2}}}
\DeclareUnicodeCharacter{2073}{{\textsuperscript{3}}}
\DeclareUnicodeCharacter{2074}{{\textsuperscript{4}}}
\DeclareUnicodeCharacter{2075}{{\textsuperscript{5}}}
\DeclareUnicodeCharacter{2076}{{\textsuperscript{6}}}
\DeclareUnicodeCharacter{2077}{{\textsuperscript{7}}}
\DeclareUnicodeCharacter{2078}{{\textsuperscript{8}}}
\DeclareUnicodeCharacter{2079}{{\textsuperscript{9}}}

\RequirePackage{calc}

\newlength{\parskipsave}
\newcounter{mycount}
\newcommand{\codeinput}[3]{
  \setlength{\parskipsave}{\bigskipamount}
  \addtolength{\parskipsave}{\parskip}
  \marginpar{\vspace*{\parskipsave}\scriptsize\path{Projekt/#1.hs}}
  \setcounter{mycount}{#2}
  \addtocounter{mycount}{#3}
  \lstinputlisting[firstline=#2,lastline={\value{mycount}},firstnumber=#2]%
    {../src/Projekt/#1.hs}
}


\lstnewenvironment{hcode}{%
  \lstset{language=Haskellulisses,numbers=none,belowskip=\smallskipamount}}{}

\lstnewenvironment{code}{%
  \lstset{language=Haskellulisses,numbers=none,belowskip=\smallskipamount}}{}


\lstMakeShortInline[mathescape=true]ħ


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Source to Latex Setup %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%\newlength{\parskipsave}
%\newcounter{mycount}
\newcommand{\haskellinput}[2]{
  \typeout{^^JThis is Haskellinput ------------------------ look for^^J
    /usr/bin/awk 'BEGIN {RS="\string\n\string\n";} /.*?^#2 /'
    ../src/GalFld/#1.hs | sed '/./,$!d' >/tmp/temp.tex
    ^^J------------------------------}
  \immediate\write18{/usr/bin/awk 'BEGIN {RS="\string\n\string\n";} /.*?^#2 /'
    ../src/GalFld/#1.hs | sed '/./,$!d' >/tmp/temp.tex}
  \immediate\write18{/usr/bin/grep -n -Ff /tmp/temp.tex
    ../src/GalFld/#1.hs | /usr/bin/gawk 'NR==1
      {print "\string\\begin\string\{lstlisting\string\}[firstnumber="$1"]"};'
      FS=":" >/tmp/temp2.tex}
  \immediate\write18{/usr/bin/cat /tmp/temp.tex >>/tmp/temp2.tex}
  \immediate\write18{echo '\string\end\string{lstlisting\string}' >>/tmp/temp2.tex}
  %Input File
  \setlength{\parskipsave}{\bigskipamount}
  \addtolength{\parskipsave}{\parskip}
  \marginpar{\vspace*{\parskipsave}\scriptsize\path{GalFld/#1.hs}}
  \input{/tmp/temp2.tex}
  %Clean up
  \immediate\write18{/usr/bin/rm /tmp/temp.tex}
  \immediate\write18{/usr/bin/rm /tmp/temp2.tex}
}





